<?php

namespace Tests\Feature\Book;

use App\Book;
use App\BookFile;
use App\BookParse;
use App\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class BookSetSourceAndMakePageTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Storage::fake(config('filesystems.default'));
    }

    public function testSetAsSourceAndMakeNewPages()
    {
        config(['activitylog.enabled' => true]);

        Notification::fake();
        Notification::assertNothingSent();

        $admin = User::factory()->administrator()->create();

        $title = $this->faker->realText(100);

        $book = Book::factory()
            ->accepted()
            ->with_create_user()
            ->create([
                'title' => $title,
                'online_read_new_format' => false
            ]);

        $this->assertFalse($book->isPagesNewFormat());

        $file = new BookFile;
        $file->open(__DIR__.'/Books/test.fb2');
        $file->statusAccepted();
        $book->files()->save($file);

        $this->actingAs($admin)
            ->get(route('book_files.set_source_and_make_pages', ['file' => $file]))
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $book->refresh();

        $this->assertTrue($book->parse->isWait());
        $this->assertTrue($book->parse->isParseOnlyPages());

        $this->assertTrue($book->parse->create_user->is($admin));
        $this->assertFalse($book->parse->create_user->is($book->create_user));

        $this->assertEquals(1, $file->activities()->count());
        $activity = $file->activities()->first();
        $this->assertEquals('set_as_source', $activity->description);
        $this->assertEquals($admin->id, $activity->causer_id);
        $this->assertEquals('user', $activity->causer_type);

        /*

                Notification::fake();

                $file->refresh();
                $book->refresh();

                $this->assertTrue($file->isSource());
                $this->assertTrue($book->parse->isSucceed());
                $this->assertTrue($book->isPagesNewFormat());

                $book->title = uniqid();
                $book->save();

                $title = $book->title;


                $content = $book->sections()->where('type', 'section')->first()->getContent();

                $this->assertEquals(11, $book->sections->count());
                $this->assertEquals(5, $book->page_count);
                $this->assertTrue($book->isPagesNewFormat());

                //
                $book->online_read_new_format = false;
                $book->save();
                $book->refresh();
                $this->assertFalse($book->isPagesNewFormat());

                $file2 = new BookFile;
                $file2->open(__DIR__ . '/../Books/test.epub');
                $file2->statusAccepted();
                $book->files()->save($file2);
                $file2->refresh();

                $this->actingAs($user)
                    ->get(route('book_files.set_source_and_make_pages', ['file' => $file2]))
                    ->assertSessionHasNoErrors()
                    ->assertRedirect();

                $book->refresh();

                $this->assertTrue($book->parse->isWait());
                $this->assertEquals($user->id, $book->parse->create_user->id);

                Notification::assertNothingSent();

                Artisan::call('book:fill_db_from_source', ['book_id' => $book->id]);

                $file->refresh();
                $file2->refresh();
                $book->refresh();

                $this->assertTrue($book->parse->isSucceed());
                $this->assertFalse($file->isSource());
                $this->assertTrue($file2->isSource());

                $content2 = $book->sections()->where('type', 'section')->first()->getContent();

                $this->assertEquals($book->title, $title);
                $this->assertGreaterThanOrEqual(1, $book->sections->count());
                $this->assertNotEquals($content, $content2);
                $this->assertEquals(2, $book->page_count);
                $this->assertTrue($book->isPagesNewFormat());
        */
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testDisableIfBookOnParse()
    {
        $user = User::factory()->create();
        $user->group->book_fb2_file_convert_divide_on_page = true;
        $user->group->edit_self_book = true;
        $user->group->edit_other_user_book = true;
        $user->push();

        $book = Book::factory()->create(['create_user_id' => $user->id])
            ->fresh();

        $file = new BookFile;
        $file->source = true;
        $file->open(__DIR__.'/Books/test.epub');
        $file->statusAccepted();
        $book->files()->save($file);

        Artisan::call('book:fill_db_from_source', ['book_id' => $book->id]);

        $this->assertTrue($book->refresh()->isWaitedCreateNewBookFiles());
        $this->assertTrue($book->isPagesNewFormat());

        $this->actingAs($user)
            ->patch(route('books.sections.update', ['book' => $book, 'section' => $book->sections()->where('type', 'section')->first()->inner_id]),
                [
                    'title' => $this->faker->realText(100),
                    'content' => $this->faker->text
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $this->assertTrue($book->refresh()->isWaitedCreateNewBookFiles());

        $file = new BookFile;
        $file->open(__DIR__.'/Books/test.fb2');
        $file->statusAccepted();
        $book->files()->save($file);

        $this->actingAs($user)
            ->get(route('book_files.set_source_and_make_pages', ['file' => $file]))
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $book->refresh();

        $this->assertTrue($book->parse->isWait());
        $this->assertFalse($book->isWaitedCreateNewBookFiles());
    }

    public function testSendToParsingIfAnotherOneAlreadyExists()
    {
        $admin = User::factory()->admin()->create();

        $book_parse = BookParse::factory()->successed()->create();

        $book = $book_parse->book;

        $file = BookFile::factory()
            ->fb2()
            ->create(['book_id' => $book->id]);

        Carbon::setTestNow(now()->addMinute());

        $this->actingAs($admin)
            ->get(route('book_files.set_source_and_make_pages', ['file' => $file]))
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $file->refresh();
        $book->refresh();
        $latest_book_parse = $book->parse;

        $this->assertEquals(2, $book->parses()->count());

        $this->assertEquals($admin->id, $latest_book_parse->create_user->id);
        $this->assertTrue($latest_book_parse->isWait());
        $this->assertTrue($latest_book_parse->isParseOnlyPages());
        $this->assertTrue($file->isSource());
        $this->assertFalse($book->isWaitedCreateNewBookFiles());
    }
}
