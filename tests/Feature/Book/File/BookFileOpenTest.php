<?php

namespace Tests\Feature\Book\File;

use App\Book;
use App\BookFile;
use Tests\TestCase;

class BookFileOpenTest extends TestCase
{
	public function testOpenFileAsStream()
	{
		$string = 'text text text';

		$book = Book::factory()->create();

		$stream = tmpfile();
		fwrite($stream, $string);

		$this->assertEquals($string, stream_get_contents($stream, -1, 0));

		$file = new BookFile;
		$file->open($stream, 'txt');

		$this->assertTrue(is_resource($file->stream));

		$book->files()->save($file);
		$file->refresh();

		$this->assertEquals(md5($string), $file->md5);
		$this->assertEquals(strlen($string), $file->size);
	}

	public function testOpenFileAsStreamSaveAsZip()
	{
		$string = 'text text text text text';

		$book = Book::factory()->without_any_authors()->create();

		$stream = tmpfile();
		fwrite($stream, $string);

		$this->assertEquals($string, stream_get_contents($stream, -1, 0));

		$file = new BookFile;
		$file->zip = true;
		$file->open($stream, 'txt');

		$this->assertTrue(is_resource($file->stream));

		$book->files()->save($file);
		$file->refresh();

		$this->assertEquals(md5($string), $file->md5);
		$this->assertEquals(strlen($string), $file->file_size);
		$this->assertGreaterThan(0, $file->size);
		$this->assertTrue($file->isZipArchive());

		$this->assertRegExp('/^' . fileNameFormat($book->getNameForBookFile()) . '_([A-z0-9]{5})\.txt/iu', $file->getFirstFileInArchive());
		$this->assertRegExp('/^' . fileNameFormat($book->getNameForBookFile()) . '_([A-z0-9]{5})\.txt\.zip/iu', $file->getFirstFileInArchive() . '.zip');
	}
}
