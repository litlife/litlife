<?php

namespace Tests\Feature\Book;

use Tests\TestCase;

class BookElasticSearchTest extends TestCase
{


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /*
                Artisan::call('elastic:drop-index', ['index-configurator' => 'App\IndexConfigurators\BookIndexConfigurator']);
                Artisan::call('elastic:create-index', ['index-configurator' => 'App\IndexConfigurators\BookIndexConfigurator']);
                Artisan::call('elastic:drop-index', ['index-configurator' => 'App\IndexConfigurators\AuthorIndexConfigurator']);
                Artisan::call('elastic:create-index', ['index-configurator' => 'App\IndexConfigurators\AuthorIndexConfigurator']);
                Artisan::call('elastic:update-mapping', ['model' => 'App\Book']);
                Artisan::call('elastic:update-mapping', ['model' => 'App\Author']);
                */
    }

    public function testDisableWarning()
    {
        $this->assertTrue(true);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    /*
        public function testScoutSearch()
        {
            $title = uniqid();

            $book = Book::factory()->private()->create();

            sleep(1);

            $query = Book::search($title);

            $this->assertEquals(1, $query->count());

            $query = Book::search($title)
                ->where('create_user_id', '=', $book->create_user_id);

            $this->assertEquals(1, $query->count());

            $query = Book::search($title)
                ->where('create_user_id', '=', $book->create_user_id)
                ->where('status', $book->status);

            $this->assertEquals(1, $query->count());

            $query = Book::search($title)
                ->where('create_user_id', '=', $book->create_user_id)
                ->where('status', StatusEnum::Accepted);

            $this->assertEquals(0, $query->count());

            $query = Book::search($title)
                ->where('create_user_id', '=', 1)
                ->where('status', $book->status);

            $this->assertEquals(0, $query->count());

            $query = Book::search($title)
                ->where('status', StatusEnum::Accepted);

            $this->assertEquals(0, $query->count());

            $query = Book::search($title)
                ->where('status', StatusEnum::Private);

            $this->assertEquals(1, $query->count());
        }

        public function testSuggest()
        {
            $book = Book::factory()->create(['title' => 'маньяк']);

            sleep(1);

            $books = Book::searchRaw([
                'suggest' => [
                    'mytermsuggester' => [
                        'text' => 'маяк',
                        'term' => [
                            'field' => "title"
                        ]
                    ]
                ]
            ]);

            $this->assertEquals('маньяк', $books['suggest']['mytermsuggester'][0]['options'][0]['text']);
        }

        public function testRule()
        {
            $book = Book::factory()->create(['title' => 'маньяк']);

            sleep(1);

            $books = Book::search('маньяк')
                ->rule(function ($builder) {
                    return [
                        'must' => [
                            'query_string' => [
                                'query' => $builder->query
                            ]
                        ]
                    ];
                });

            $this->assertEquals($book->id, $books->get()->first()->id);
        }

        public function testRaw()
        {
            $book = Book::factory()->create(['title' => 'test']);

            sleep(1);

            $books = Book::searchRaw([
                'query' => [
                    'bool' => [
                        'must' => [
                            'query_string' => [
                                'query' => 'test'
                            ]
                        ]
                    ]
                ],
                'suggest' => [
                    'mytermsuggester' => [
                        'text' => 'маяк',
                        'term' => [
                            'field' => "title"
                        ]
                    ]
                ]
            ]);

            $this->assertEquals('test', $books['hits']['hits'][0]['_source']['title']);
        }

        public function testFuzzy()
        {
            $book = Book::factory()->create(['title' => 'маяк']);

            sleep(1);

            $books = Book::search('маньяк')
                ->rule(function ($builder) {
                    return [
                        'must' => [
                            'fuzzy' => [
                                'title' => $builder->query
                            ]
                        ]
                    ];
                });

            $this->assertEquals('маяк', $books->get()->first()->title);
        }

        public function testSuggest2()
        {
            $book = Book::factory()->create(['title' => 'маньяк']);

            sleep(1);

            $books = Book::searchRaw([
                'suggest' => [
                    'mytermsuggester' => [
                        'text' => 'маяк',
                        'term' => [
                            'field' => "title"
                        ]
                    ]
                ]
            ]);

            //dd($books);
        }

        public function testAuthorFuzzy()
        {
            $author = Author::factory()->create(['first_name' => 'елена', 'last_name' => 'васильевна']);

            sleep(1);

            $authors = Author::search('елена вавна')
                ->rule(function ($builder) {
                    return [
                        'must' => [
                            'multi_match' => [
                                'query' => $builder->query,
                                "fields" => [
                                    "last_name",
                                    "first_name",
                                    "middle_name"
                                ],
                                "fuzziness" => "5"
                            ]
                        ]
                    ];
                });

            $author = $authors->get()->first();

            $this->assertEquals('васильевна', $author->last_name);
            $this->assertEquals('елена', $author->first_name);
        }

        public function testPartOfWord()
        {
            $book = Book::factory()->create(['title' => 'word part']);

            $book2 = Book::factory()->create(['title' => 'tearing apart']);

            sleep(1);

            $books = Book::search('par')
                ->rule(function ($builder) {
                    return [
                        'must' => [
                            'prefix' => [
                                'title' => $builder->query
                            ]
                        ]
                    ];
                });

            $this->assertEquals(1, $books->get()->count());

            $this->assertEquals('word part', $books->get()->first()->title);
        }
        */
    /*
        public function testPartOfWord2()
        {
            $book = Book::factory()->create(['title' => 'часть слова']);

            $book2 = Book::factory()->create(['title' => 'части слов']);

            $book3 = Book::factory()->create(['title' => 'часть солва']);

            $book4 = Book::factory()->create(['title' => 'ча сл']);

            $book5 = Book::factory()->create(['title' => 'сло']);

            $book6 = Book::factory()->create(['title' => 'присло']);

            $book7 = Book::factory()->create(['title' => 'без слов ывфыв']);

            $book8 = Book::factory()->create(['title' => 'например слов текст']);

            $book9 = Book::factory()->create(['title' => 'например солв текст']);

            $book10 = Book::factory()->create(['title' => ' слов текст']);

            sleep(1);

            $books = Book::search('сло')
                ->rule(function ($builder) {
                    return [
                        'must' => [
                            'multi_match' => [
                                'query' => $builder->query,
                                'fields' => [
                                    "title^2",
                                    "title.ngram"
                                ]
                            ],
                        ]
                    ];
                });

            dump($books->get()->pluck('title')->toArray());

            sleep(5);

            dump($books->get()->pluck('title')->toArray());

            sleep(5);

            dump($books->get()->pluck('title')->toArray());

            sleep(5);

            dump($books->get()->pluck('title')->toArray());

            sleep(5);

            dump($books->get()->pluck('title')->toArray());

            sleep(5);

            dump($books->get()->pluck('title')->toArray());

            sleep(5);

            dd($books->explain());
        }
    */
    /*
        public function testSuggest3()
        {
            $book = Book::factory()->create(['title' => 'book title']);

            $author = Author::factory()->create(['last_name' => 'маньяк', 'first_name' => '']);

            sleep(1);

            $books = Book::searchRaw([
                'suggest' => [
                    'mytermsuggester' => [
                        'text' => 'маяк',
                        'term' => [
                            'field' => "title"
                        ]
                    ]
                ]
            ]);

            //dd($books);
        }
        */
    /*
        public function testPartOfWord2()
        {
            $author = Author::factory()->create([
                    'first_name' => 'василий',
                    'last_name' => 'иванов',
                    'nickname' => 'test'
                ]);

            $author = Author::factory()->create([
                    'first_name' => 'вас',
                    'last_name' => 'иванов',
                    'nickname' => 'test'
                ]);

            $author = Author::factory()->create([
                    'first_name' => 'василий',
                    'last_name' => 'николаев',
                    'nickname' => 'test'
                ]);

            sleep(10);

            $authors = Author::search('василий николаев')
                ->rule(function ($builder) {
                    return [
                        'must' => [
                            'multi_match' => [
                                'query' => $builder->query,
                                'fields' => [
                                    "first_name^2",
                                    "first_name.ngram",
                                    "last_name^2",
                                    "last_name.ngram",
                                    "middle_name^2",
                                    "middle_name.ngram",
                                    "nickname^2",
                                    "nickname.ngram",
                                ]
                            ],
                        ]
                    ];
                });

            dump($authors->get()->pluck('first_name')->toArray());

            dd($authors->explain());
        }
        */
    /*
        public function testSearchBookByAuthorName()
        {
            $book = Book::factory()->create(['title' => uniqid()]);

            $author = Author::factory()->create(['last_name' => uniqid()]);

            $book->writers()->sync([$author->id]);

            sleep(1);

            $books = Book::search($author->last_name)
                ->rule(function ($builder) {
                    return [
                        'must' => [
                            'query_string' => [
                                'query' => $builder->query
                            ]
                        ]
                    ];
                });

            $this->assertEquals($book->id, $books->get()->first()->id);
        }
        */
}

