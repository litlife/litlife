<?php

namespace Tests\Feature\User;

use Anhskohbo\NoCaptcha\Facades\NoCaptcha;
use App\Invitation;
use App\Notifications\InvitationNotification;
use App\UserEmail;
use Illuminate\Notifications\AnonymousNotifiable;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class UserInvitationStoreTest extends TestCase
{
	public function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		// prevent validation error on captcha
		NoCaptcha::shouldReceive('verifyResponse')
			->once()
			->andReturn(true);
	}

	public function testSendInvitationHttp()
	{
		Notification::fake();

		$email = $this->faker->email;

		$this->post(route('invitation.store'), [
			'g-recaptcha-response' => '1',
			'email' => $email
		])
			->assertSessionHasNoErrors()
			->assertRedirect();

		$invitation = Invitation::whereEmail($email)->first();

		$this->assertNotNull($invitation);

		Notification::assertSentTo(
			new AnonymousNotifiable,
			InvitationNotification::class,
			function ($notification, $channels) use ($invitation) {
				return $notification->invitation->id == $invitation->id;
			}
		);
	}

	public function testDenyInvitationIfConfirmedEmailExistsAndCreatedAfterMoveToNewEngine()
	{
		$email = factory(UserEmail::class)
			->states('confirmed')
			->create();

		$response = $this->post(route('invitation.store'),
			[
				'g-recaptcha-response' => '1',
				'email' => $email->email
			]
		)->assertRedirect();
		//dump(session('errors'));
		$response->assertSessionHasErrorsIn('invitation', ['email' => __('validation.user_email_unique')]);
	}

	public function testDenyInvitationIfUnconfirmedEmailExistsAndCreatedBeforeMoveToNewEngine()
	{
		$email = factory(UserEmail::class)
			->states('not_confirmed', 'created_before_move_to_new_engine')
			->create();

		$response = $this->post(route('invitation.store'),
			[
				'g-recaptcha-response' => '1',
				'email' => $email->email
			]
		)->assertRedirect();
		//dump(session('errors'));
		$response->assertSessionHasErrorsIn('invitation', ['email' => __('validation.user_email_unique')]);
	}

	public function testSameEmailExists()
	{
		$email = factory(UserEmail::class)
			->create(['confirm' => true]);

		$response = $this->post(route('invitation.store'),
			[
				'g-recaptcha-response' => '1',
				'email' => $email->email
			]
		);

		$response->assertRedirect()
			->assertSessionHasErrors(['email'], __('validation.user_email_unique'), 'invitation');
	}
}
