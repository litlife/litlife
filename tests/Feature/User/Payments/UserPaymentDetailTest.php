<?php

namespace Tests\Feature\User\Payments;

use App\Notifications\BillingInformationChangedNotification;
use App\User;
use App\UserPaymentDetail;
use Illuminate\Support\Facades\Notification;
use Litlife\Unitpay\Facades\UnitPay;
use Litlife\Unitpay\UnitPayApiResponse;
use Litlife\Unitpay\UnitPayFake;
use Tests\TestCase;

class UserPaymentDetailTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Notification::fake();
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testStoreNumbers()
    {
        $user = User::factory()->create();

        $creditCardNumber = $this->faker->creditCardNumber;
        $phoneNumber = '+79876543'.rand(100, 999);

        UnitPay::shouldReceive('request')
            ->once()
            ->andReturn(new UnitPayApiResponse(json_encode([
                'result' => [
                    'bin' => "521841",
                    'countryCode' => 'CH',
                    'brand' => 'MASTERCARD',
                    'type' => 'CREDIT',
                    'category' => 'WORLD',
                    'bank' => 'UBS SWITZERLAND AG',
                    'bankUrl' => '',
                    'bankPhone' => ''
                ]
            ])));
        UnitPay::makePartial();

        $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => $creditCardNumber,
                    'qiwi' => $phoneNumber
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $user->refresh();

        $wallets = $user->wallets;

        $this->assertEquals($creditCardNumber, $wallets->where('type', 'card')->first()->number);
        $this->assertEquals($phoneNumber, $wallets->where('type', 'qiwi')->first()->number);

        $this->assertNotificationSended($user);
    }

    public function assertNotificationSended($user)
    {
        Notification::assertSentTo(
            $user,
            BillingInformationChangedNotification::class,
            function ($notification, $channels) use ($user) {
                $this->assertContains('mail', $channels);

                $mail = $notification->toMail($user);

                $this->assertEquals(__('notification.billing_information_changed.subject'), $mail->subject);
                $this->assertEquals(__('notification.billing_information_changed.line', ['user' => $user]), $mail->introLines[0]);
                $this->assertEquals(__('notification.billing_information_changed.action'), $mail->actionText);

                foreach ($user->wallets()->latest()->get() as $number => $wallet) {
                    $this->assertEquals(__('user_payment_detail.'.$wallet->type).': **'.$wallet->number.'**', $mail->introLines[$number + 1]);
                }

                return $notification->user->id == $user->id;
            }
        );
    }

    public function testDelete()
    {
        $user = User::factory()->create();

        $card = UserPaymentDetail::factory()->create(['user_id' => $user->id, 'type' => 'card', 'number' => '4024007151327698']);

        $qiwi = UserPaymentDetail::factory()->create(['user_id' => $user->id, 'type' => 'qiwi', 'number' => '+79876543'.rand(100, 500)]);

        $this->assertEquals(2, $user->wallets()->count());

        $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => $card->number,
                    'qiwi' => ''
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $user->refresh();
        $wallets = $user->wallets;

        $this->assertEquals(1, $wallets->count());
        $this->assertEquals($card->number, $wallets->where('type', 'card')->first()->number);
        $this->assertNull($wallets->where('type', 'qiwi')->first());

        $this->assertNotificationSended($user);
    }

    public function testDeleteAndAddAgain()
    {
        $user = User::factory()->create();

        $number = '4024007151327698';

        $card = UserPaymentDetail::factory()->create(['user_id' => $user->id, 'type' => 'card', 'number' => $number])->fresh();

        $card->delete();

        UnitPay::shouldReceive('request')
            ->once()
            ->andReturn(new UnitPayApiResponse(json_encode([
                'result' => [
                    'bin' => "521841",
                    'countryCode' => 'CH',
                    'brand' => 'MASTERCARD',
                    'type' => 'CREDIT',
                    'category' => 'WORLD',
                    'bank' => 'UBS SWITZERLAND AG',
                    'bankUrl' => '',
                    'bankPhone' => ''
                ]
            ])));
        UnitPay::makePartial();

        $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => $number
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $user->refresh();

        $wallets = $user->wallets;

        $this->assertEquals(1, $wallets->count());
        $this->assertEquals($card->number, $wallets->where('type', 'card')->first()->number);

        $this->assertNotificationSended($user);
    }

    public function testChange()
    {
        $user = User::factory()->create();

        $card = UserPaymentDetail::factory()->create(['user_id' => $user->id, 'type' => 'card', 'number' => '4024007151327698'])->fresh();

        $number = '5218415558066285';

        UnitPay::shouldReceive('request')
            ->once()
            ->andReturn(new UnitPayApiResponse(json_encode([
                'result' => [
                    'bin' => "521841",
                    'countryCode' => 'CH',
                    'brand' => 'MASTERCARD',
                    'type' => 'CREDIT',
                    'category' => 'WORLD',
                    'bank' => 'UBS SWITZERLAND AG',
                    'bankUrl' => '',
                    'bankPhone' => ''
                ]
            ])));
        UnitPay::makePartial();

        $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => $number
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $user->refresh();

        $wallets = $user->wallets;

        $this->assertTrue($card->fresh()->trashed());
        $this->assertEquals(1, $wallets->count());
        $this->assertEquals($number, $wallets->where('type', 'card')->first()->number);

        $this->assertNotificationSended($user);
    }

    public function testNothingChange()
    {
        $user = User::factory()->create();

        $card = UserPaymentDetail::factory()->create(['user_id' => $user->id, 'type' => 'card', 'number' => '4024007151327698'])->fresh();

        $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => $card->number
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $user->refresh();

        $wallets = $user->wallets;

        $this->assertEquals(1, $wallets->count());

        Notification::assertNotSentTo(
            [$user], BillingInformationChangedNotification::class
        );

        Notification::assertNothingSent();
    }

    public function testWrongCardNumber()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => '123456'
                ])
            ->assertRedirect();

        $response->assertSessionHasErrors('card', __('validation.credit_card.card_invalid'));
    }

    public function testWrongWMRPurse()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'wmr' => '123456789'
                ])
            ->assertRedirect();

        $response->assertSessionHasErrors('wmr');
    }

    public function testWrongYandexMoney()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'yandex' => 'dfg123456789'
                ])
            ->assertRedirect();

        $response->assertSessionHasErrors('yandex');
    }

    public function testWrongQiwi()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'qiwi' => '123456789'
                ])
            ->assertRedirect();

        $response->assertSessionHasErrors('qiwi');
    }

    public function testCardInfoDetails()
    {
        $user = User::factory()->create();

        $json = [
            'result' => [
                "bin" => "555555",
                "countryCode" => "BR",
                "brand" => "MASTERCARD",
                "type" => "CREDIT",
                "category" => "",
                "bank" => "",
                "bankUrl" => "",
                "bankPhone" => "",
            ]
        ];

        UnitPay::shouldReceive('request')
            ->once()
            ->andReturn(new UnitPayApiResponse(json_encode($json)));
        UnitPay::makePartial();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => '5555555555554444'
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $user->refresh();
        $wallet = $user->wallets->first();

        $this->assertEquals((object) $json['result'], $wallet->params);
    }

    public function testIsRuCard()
    {
        $card = UserPaymentDetail::factory()->card()->create();

        $this->assertFalse($card->isRuCard());

        $card->params = [
            "bin" => "555555",
            "countryCode" => "UK",
            "brand" => "MASTERCARD",
            "type" => "CREDIT",
            "category" => "",
            "bank" => "",
            "bankUrl" => "",
            "bankPhone" => ""
        ];

        $card->save();

        $this->assertFalse($card->isRuCard());

        $card->params = [
            "bin" => "555555",
            "countryCode" => "RU",
            "brand" => "MASTERCARD",
            "type" => "CREDIT",
            "category" => "",
            "bank" => "",
            "bankUrl" => "",
            "bankPhone" => ""
        ];

        $card->save();

        $this->assertTrue($card->isRuCard());
    }

    public function testCardBrand()
    {
        $card = UserPaymentDetail::factory()->card()->create();

        $this->assertEquals('', $card->getCardBrand());

        $card->params = ["brand" => "MASTERCARD"];
        $card->save();

        $this->assertEquals('MASTERCARD', $card->getCardBrand());

        $card->params = ["brand" => "VISA"];
        $card->save();

        $this->assertEquals('VISA', $card->getCardBrand());
    }

    public function testCountryCode()
    {
        $card = UserPaymentDetail::factory()->card()->create();

        $this->assertEquals('', $card->getCountryCode());

        $card->params = ["countryCode" => "UK"];
        $card->save();

        $this->assertEquals('UK', $card->getCountryCode());

        $card->params = ["countryCode" => "RU"];
        $card->save();

        $this->assertEquals('RU', $card->getCountryCode());
    }

    public function testStorePhoneNumberWithOtherSymbols()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'qiwi' => '+7 (927) 111‑11-11'
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $user->refresh();

        $wallet = $user->wallets->first();

        $this->assertEquals('+79271111111', $wallet->number);
    }

    public function testWMPPurse()
    {
        $number = 'P123456789123';

        $user = User::factory()->withSelledBook(1000)->create();
        $user->group->withdrawal = true;
        $user->push();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'wmr' => $number
                ])
            ->assertRedirect();

        $response->assertSessionHasNoErrors();

        $wallet = $user->wallets->first();

        $this->assertEquals($number, $wallet->number);
        $this->assertEquals($user->id, $wallet->user_id);
        $this->assertEquals('wmr', $wallet->type);

        $response = $this->actingAs($user)
            ->get(route('users.wallet.payment_details', $user))
            ->assertOk()
            ->assertSeeText(__('user_payment_detail.wmr'));

        $response = $this->actingAs($user)
            ->get(route('users.wallet.withdrawal', $user))
            ->assertOk()
            ->assertSeeText(__('user_payment_detail.wmr'))
            ->assertSeeText($number);
    }

    public function testCardChecksumInvalid()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => '4567892645678978'
                ])
            ->assertRedirect()
            ->assertSessionHasErrors(['card' => __('validation.credit_card.card_checksum_invalid')]);
    }

    public function testSantizeCardNumber()
    {
        $user = User::factory()->create();

        $json = [
            'result' => [
                "bin" => "555555",
                "countryCode" => "BR",
                "brand" => "MASTERCARD",
                "type" => "CREDIT",
                "category" => "",
                "bank" => "",
                "bankUrl" => "",
                "bankPhone" => "",
            ]
        ];

        UnitPay::shouldReceive('request')
            ->once()
            ->andReturn(new UnitPayApiResponse(json_encode($json)));
        UnitPay::makePartial();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'card' => '6011 9697 4880 1974'
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();
    }

    public function testSantizeQiwiPhoneNumber()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
            ->post(route('users.wallet.payment_details.save', $user),
                [
                    'qiwi' => '+7(917)2597536'
                ])
            ->assertSessionHasNoErrors()
            ->assertRedirect();

        $wallet = $user->wallets->first();

        $this->assertEquals('+79172597536', $wallet->number);
    }
}
