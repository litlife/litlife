<?php

namespace Litlife\Unitpay\Tests;

use Exception;
use Litlife\Unitpay\Exceptions\UnitPayApiResponseException;
use Litlife\Unitpay\UnitPayApi;
use Litlife\Unitpay\UnitPayApiResponse;
use Tests\TestCase;

class UnitPayTest extends TestCase
{
	private $secretKey;

	public function setUpFaker(): void
	{
		$this->faker = $this->makeFaker();
	}

	public function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		config(['unitpay.public_key' => '111']);
		config(['unitpay.api_url' => 'https://unitpay.cz/api']);
		config(['unitpay.url' => 'https://unitpay.cz']);
		config(['unitpay.login' => 'test@mail.com']);
		config(['unitpay.project_id' => '333']);
		config(['unitpay.secret_key' => '444']);
		config(['unitpay.api_secret_key' => '555']);
		config(['unitpay.allowed_ips' => ['1.2.3.4']]);
	}

	public function testCheckSignature()
	{
		$params = [
			'unitpayId' => '1000',
			'projectId' => '2000',
			'account' => '30000',
			'payerSum' => '100',
			'payerCurrency' => 'RUB',
			'profit' => '100',
			'paymentType' => 'card',
			'orderSum' => '100',
			'orderCurrency' => 'RUB',
			'date' => '2012-10-01 12:32:00',
			'test' => '0'
		];

		config(['unitpay.secret_key' => 'test']);

		$api = new UnitPayApi();
		$signature = $api->getSignature('check', $params);

		$this->assertEquals('b13a71391be17ea87b89ca6efb26489ad9d89176b13e07b5082a7ac500978bbd', $signature);
	}

	public function testCheckRightIp()
	{
		config(['unitpay.allowed_ips' => ['1.2.3.4']]);

		$api = new UnitPayApi();

		try {
			$api->checkIp('1.2.3.4');
		} catch (Exception $exception) {
			$this->assertTrue(false);
		}
		$this->assertTrue(true);
	}

	public function testCheckWrongIp()
	{
		config(['unitpay.allowed_ips' => ['1.2.3.5']]);

		$api = new UnitPayApi();

		try {
			$api->checkIp('1.2.3.4');
		} catch (Exception $exception) {

		}
		$this->assertEquals('Ip is wrong', $exception->getMessage());
	}

	public function testCheckSignatureWithOfficialSDK()
	{
		$method = 'check';

		$params = [
			'unitpayId' => '1000',
			'projectId' => '2000',
			'account' => '30000',
			'payerSum' => '100',
			'payerCurrency' => 'RUB',
			'profit' => '100',
			'paymentType' => 'card',
			'orderSum' => '100',
			'orderCurrency' => 'RUB',
			'date' => '2012-10-01 12:32:00',
			'test' => '0'
		];

		$secretKey = uniqid();
		$this->secretKey = $secretKey;

		config(['unitpay.secret_key' => $secretKey]);

		$api = new UnitPayApi();

		$this->assertEquals($api->getSignature($method, $params), $this->getSignature($params, $method));
		$this->assertEquals($api->getSignature($method, $params), $this->getSha256SignatureByMethodAndParams($method, $params, $secretKey));

		$this->assertEquals($api->getSignature(null, $params), $this->getSignature($params, null));
		$this->assertEquals($api->getSignature('error', $params), $this->getSignature($params, 'error'));

		$this->assertNotEquals($api->getSignature('check', $params), $this->getSignature($params, 'error'));
	}

	/*
	 * Official SDK Function
	 * */

	function getSignature(array $params, $method = null)
	{
		ksort($params);
		unset($params['sign']);
		unset($params['signature']);
		array_push($params, $this->secretKey);
		if ($method) {
			array_unshift($params, $method);
		}
		return hash('sha256', join('{up}', $params));
	}

	/**
	 * @param $method
	 * @param array $params
	 * @param $secretKey
	 * @return string
	 */
	private function getSha256SignatureByMethodAndParams($method, array $params, $secretKey)
	{
		$delimiter = '{up}';
		ksort($params);
		unset($params['sign']);
		unset($params['signature']);
		return hash('sha256', $method . $delimiter . join($delimiter, $params) . $delimiter . $secretKey);
	}

	public function testFormUrl()
	{
		$params['sum'] = 50;
		$params['account'] = 1;
		$params['desc'] = 'test';
		$params['currency'] = 'RUB';
		$params['backUrl'] = 'http://test';

		$type = 'yandex';

		$api = new UnitPayApi();

		$this->assertEquals('https://unitpay.cz/pay/111/yandex?sum=50&account=1&desc=test&currency=RUB&backUrl=http%3A%2F%2Ftest&signature=9533950821f1143279a5f6c12fab0316c4e26ec1776b14dda850f928bb1ac546', $api->getFormUrl($type, $params));
	}

	public function testGetCommissions()
	{
		$api = new UnitPayApi();

		$api = $api->getCommissions();

		$this->assertEquals([
			'projectId' => config('unitpay.project_id'),
			'login' => config('unitpay.login'),
			'secretKey' => config('unitpay.api_secret_key')
		], $api->getParams());

		$this->assertEquals('getCommissions', $api->getMethod());
	}

	public function testInitPayment()
	{
		$api = new UnitPayApi();

		$params = [
			'sum' => '10.00',
			'unitpayId' => '1000',
			'projectId' => '2000',
			'account' => '30000',
			'payerSum' => '100',
			'payerCurrency' => 'RUB',
			'profit' => '100',
			'paymentType' => 'card',
			'orderSum' => '100',
			'orderCurrency' => 'RUB',
			'date' => '2012-10-01 12:32:00',
			'test' => '0',
			'resultUrl' => 'http://test',
			'desc' => 'description'
		];

		$api = $api->initPayment($params);

		$this->assertEquals([
			'projectId' => config('unitpay.project_id'),
			'secretKey' => config('unitpay.api_secret_key'),
			'sum' => '10.00',
			'unitpayId' => '1000',
			'account' => '30000',
			'payerSum' => '100',
			'payerCurrency' => 'RUB',
			'profit' => '100',
			'paymentType' => 'card',
			'orderSum' => '100',
			'orderCurrency' => 'RUB',
			'date' => '2012-10-01 12:32:00',
			'test' => '0',
			'resultUrl' => 'http://test',
			'desc' => 'description',
			'ip' => '127.0.0.1'
		], $api->getParams());

		$this->assertEquals('initPayment', $api->getMethod());
	}

	public function testGetPayment()
	{
		$api = new UnitPayApi();

		$params = [
			'paymentId' => '123',
		];

		$api = $api->getPayment($params);

		$this->assertEquals([
			'paymentId' => '123',
			'secretKey' => config('unitpay.secret_key')
		], $api->getParams());

		$this->assertEquals('getPayment', $api->getMethod());
	}

	public function testMassPayment()
	{
		$api = new UnitPayApi();

		$params = [
			'purse' => '1234',
			'transactionId' => '1',
			'sum' => '10.00',
			'paymentType' => 'webmoney'
		];

		$api = $api->massPayment($params);

		$this->assertEquals([
			'login' => config('unitpay.login'),
			'secretKey' => config('unitpay.api_secret_key'),
			'purse' => '1234',
			'transactionId' => '1',
			'sum' => '10.00',
			'paymentType' => 'webmoney',
			'projectId' => config('unitpay.project_id')
		], $api->getParams());

		$this->assertEquals('massPayment', $api->getMethod());
	}

	public function testMassPaymentStatus()
	{
		$api = new UnitPayApi();

		$params = [
			'transactionId' => '1'
		];

		$api = $api->massPaymentStatus($params);

		$this->assertEquals([
			'login' => config('unitpay.login'),
			'secretKey' => config('unitpay.api_secret_key'),
			'transactionId' => '1'
		], $api->getParams());

		$this->assertEquals('massPaymentStatus', $api->getMethod());
	}

	public function testGetPartner()
	{
		$api = new UnitPayApi();

		$api = $api->getPartner();

		$this->assertEquals([
			'login' => config('unitpay.login'),
			'secretKey' => config('unitpay.api_secret_key')
		], $api->getParams());

		$this->assertEquals('getPartner', $api->getMethod());
	}

	public function testMasspaymentNegativeNumber()
	{
		$api = new UnitPayApi();

		$params = [
			'purse' => '1234',
			'transactionId' => '1',
			'sum' => '-10.00',
			'paymentType' => 'webmoney'
		];

		$this->expectExceptionMessage(__('validation.min.numeric', ['attribute' => 'sum', 'min' => '1']));

		$api = $api->massPayment($params);
	}

	public function testGetBinInfo()
	{
		$api = new UnitPayApi();

		$params = [
			'bin' => '123456'
		];

		$api = $api->getBinInfo($params);

		$this->assertEquals([
			'login' => config('unitpay.login'),
			'secretKey' => config('unitpay.api_secret_key'),
			'bin' => '123456'
		], $api->getParams());

		$this->assertEquals('getBinInfo', $api->getMethod());
	}

	public function testTestModeEnabled()
	{
		$api = new UnitPayApi();
		$api->testRequestEnable();

		$this->assertTrue($api->isTestRequestEnabled());

		$params = [
			'bin' => '123456'
		];

		$api = $api->getBinInfo($params);

		$this->assertEquals([
			'login' => config('unitpay.login'),
			'secretKey' => config('unitpay.api_secret_key'),
			'bin' => '123456',
			'test' => '1'
		], $api->getParams());

		$this->assertEquals('getBinInfo', $api->getMethod());
	}

	public function testTestModeDisabled()
	{
		$api = new UnitPayApi();

		$this->assertFalse($api->isTestRequestEnabled());

		$params = [
			'bin' => '123456'
		];

		$api = $api->getBinInfo($params);

		$this->assertEquals([
			'login' => config('unitpay.login'),
			'secretKey' => config('unitpay.api_secret_key'),
			'bin' => '123456'
		], $api->getParams());

		$this->assertEquals('getBinInfo', $api->getMethod());
	}

	public function testApiResponseIsError()
	{
		$json = '{"error":{"message":"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 secretKey","code":-32000}}';

		$response = new UnitPayApiResponse($json);

		$this->assertTrue($response->isError());
		$this->assertEquals('-32000', $response->getErrorCode());
		$this->assertEquals('Неверный ключ secretKey', $response->getErrorMessage());
	}

	public function testApiResponseException()
	{
		$json = '{"error":{"message":"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 secretKey","code":-32000}}';

		$this->expectExceptionObject(new UnitPayApiResponseException('Неверный ключ secretKey', '-32000'));

		$response = new UnitPayApiResponse($json);
		$response->throwExceptionIfHasError();
	}
}
